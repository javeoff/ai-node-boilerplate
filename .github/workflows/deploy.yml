name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Обновление пакетов
            sudo apt-get update
            sudo apt-get upgrade -y

            # Установка необходимых зависимостей
            sudo apt-get install -y \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg \
              lsb-release \
              make

            # Добавление Docker GPG ключа
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

            # Добавление Docker репозитория
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            # Установка Docker
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io

            # Установка Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Клонирование/обновление репозитория
            if [ ! -d "ai-node-boilerplate" ]; then
              git clone https://github.com/${{ github.repository }}.git ai-node-boilerplate
            else
              cd ai-node-boilerplate
              git pull
            fi
            
            cd ai-node-boilerplate

            # Создание .env файла из secrets
            echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" > .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env
            echo "NPM_TOKEN=${{ secrets.NPM_TOKEN }}" >> .env
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
            echo "TELEGRAM_CI_ID=${{ secrets.TELEGRAM_CI_ID }}" >> .env
            echo "NODE_ENV=production" >> .env
            
            # Остановка и удаление старых контейнеров
            make stop || true
            make clean || true

            # Сборка и запуск нового контейнера
            NODE_ENV=production make build
            NODE_ENV=production make run
